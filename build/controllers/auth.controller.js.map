{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["signIn","req","res","User","findOne","email","body","userFounded","status","json","validatePassword","password","isPasswordCorrect","token","Token","createToken","_id","signUp","firstName","lastName","encryptPassword","createdUser","save"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEO,IAAMA,MAAM;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQC,iBAAKC,OAAL,CAAa;AAAEC,cAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASD;AAAlB,aAAb,CADR;;AAAA;AACZE,YAAAA,WADY;;AAAA,gBAGbA,WAHa;AAAA;AAAA;AAAA;;AAAA,6CAGOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB,CAHP;;AAAA;AAAA;AAAA,mBAKcN,iBAAKO,gBAAL,CAAsBT,GAAG,CAACK,IAAJ,CAASK,QAA/B,EAAyCJ,WAAW,CAACI,QAArD,CALd;;AAAA;AAKZC,YAAAA,iBALY;;AAAA,gBAObA,iBAPa;AAAA;AAAA;AAAA;;AAAA,6CAOaV,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oBAArB,CAPb;;AAAA;AASZI,YAAAA,KATY,GASJC,KAAK,CAACC,WAAN,CAAkBR,WAAW,CAACS,GAA9B,CATI;AAUlBd,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEI,cAAAA,KAAK,EAAEA;AAAT,aAAT;;AAVkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANb,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AAcA,IAAMiB,MAAM;AAAA,4FAAG,kBAAOhB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAC+BD,GAAG,CAACK,IADnC,EACVY,SADU,aACVA,SADU,EACCC,QADD,aACCA,QADD,EACWd,KADX,aACWA,KADX,EACkBM,QADlB,aACkBA,QADlB;AAAA;AAAA,mBAGQR,iBAAKC,OAAL,CAAa;AAAEC,cAAAA,KAAK,EAALA;AAAF,aAAb,CAHR;;AAAA;AAGZE,YAAAA,WAHY;;AAAA,iBAKdA,WALc;AAAA;AAAA;AAAA;;AAMdL,YAAAA,GAAG,CAACO,IAAJ,CAAS,qBAAT;AANc;AAAA;;AAAA;AAAA,2BASUN,gBATV;AAAA,2BAUVe,SAVU;AAAA,2BAWVC,QAXU;AAAA,2BAYVd,KAZU;AAAA;AAAA,mBAaMF,iBAAKiB,eAAL,CAAqBT,QAArB,CAbN;;AAAA;AAAA;AAAA;AAUVO,cAAAA,SAVU;AAWVC,cAAAA,QAXU;AAYVd,cAAAA,KAZU;AAaVM,cAAAA,QAbU;AAAA;AASRU,YAAAA,WATQ;AAAA;AAAA,mBAgBRA,WAAW,CAACC,IAAZ,EAhBQ;;AAAA;AAkBRT,YAAAA,KAlBQ,GAkBAC,KAAK,CAACC,WAAN,CAAkBM,WAAW,CAACL,GAA9B,CAlBA;AAmBdd,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEI,cAAAA,KAAK,EAAEA;AAAT,aAAT;;AAnBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANI,MAAM;AAAA;AAAA;AAAA,GAAZ","sourcesContent":["import User from '../models/User'\nimport * as Token from '../utils/Token'\n\nexport const signIn = async (req, res) => {\n    const userFounded = await User.findOne({ email: req.body.email })\n\n    if (!userFounded) return res.status(400).json('user not found')\n\n    const isPasswordCorrect = await User.validatePassword(req.body.password, userFounded.password)\n\n    if (!isPasswordCorrect) return res.status(401).json('password incorrect')\n\n    const token = Token.createToken(userFounded._id)\n    res.json({ token: token })\n\n}\n\nexport const signUp = async (req, res) => {\n    const { firstName, lastName, email, password } = req.body\n\n    const userFounded = await User.findOne({ email })\n\n    if (userFounded) {\n        res.json('user already exists')\n    }\n    else {\n        const createdUser = new User({\n            firstName,\n            lastName,\n            email,\n            password: await User.encryptPassword(password)\n        })\n\n        await createdUser.save()\n\n        const token = Token.createToken(createdUser._id)\n        res.json({ token: token })\n    }\n\n}"],"file":"auth.controller.js"}