{"version":3,"sources":["../../src/middlewares/ValidateToken.js"],"names":["validateToken","req","res","next","recibedToken","headers","decodedToken","jwt","verify","config","SECRET_TOKEN","User","findById","id","status","json"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAGO,IAAMA,aAAa;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,YAAAA,YADmB,GACJH,GAAG,CAACI,OAAJ,CAAY,gBAAZ,CADI;AAAA;AAIfC,YAAAA,YAJe,GAIAC,yBAAIC,MAAJ,CAAWJ,YAAX,EAAyBK,mBAAOC,YAAhC,CAJA;AAAA;AAAA,mBAKfC,iBAAKC,QAAL,CAAcN,YAAY,CAACO,EAA3B,CALe;;AAAA;AAMrBV,YAAAA,IAAI;AANiB;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAQdD,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB,CARc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbf,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import jwt from 'jsonwebtoken'\nimport config from '../config'\nimport User from '../models/User'\n\n\nexport const validateToken = async (req, res, next) => {\n    const recibedToken = req.headers[\"x-access-token\"]\n\n    try {\n        const decodedToken = jwt.verify(recibedToken, config.SECRET_TOKEN)\n        await User.findById(decodedToken.id)\n        next()\n    } catch (error) {\n        return res.status(404).json('invalid user')\n    }\n\n}"],"file":"ValidateToken.js"}